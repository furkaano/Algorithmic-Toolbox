        -:    0:Source:D:/CLionProjects/Coursera/Data Structures and Algorithms/Algorithmic Toolbox/Week1-Problem2/main.cpp
        -:    0:Graph:D:\CLionProjects\Coursera\Data Structures and Algorithms\Algorithmic Toolbox\Week1-Problem2\cmake-build-debug-coverage\CMakeFiles\Week1_Problem2.dir\main.cpp.gcno
        -:    0:Data:D:\CLionProjects\Coursera\Data Structures and Algorithms\Algorithmic Toolbox\Week1-Problem2\cmake-build-debug-coverage\CMakeFiles\Week1_Problem2.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include <cstdlib>
        -:    3:#include <bits/stdc++.h>
        -:    4:using namespace std;
        -:    5:
        -:    6:long long pairwise_Product_Fast(long long arr[], int size);
        -:    7:long long pairwise_Product_Slow(long long arr[], int size);
        -:    8:
        1:    9:int main() {
        -:   10:
        -:   11:    // STRESS TEST
        -:   12:    while(true) { // INFINITE LOOP
        2:   13:        int n = rand() % 4 + 2; // that was 10 + 2
        1:   14:        cout << n << "\n";
        1:   14-block  0
        -:   15:
        1:   16:        long long arr[n];
        -:   17:
        4:   18:        for (int i = 0; i < n; ++i)
        1:   18-block  0
        4:   18-block  1
        3:   19:            arr[i] = (long long)(rand() % 10); // that was 100000
        3:   19-block  0
        4:   20:        for (int j = 0; j < n; ++j)
        1:   20-block  0
        4:   20-block  1
        3:   20-block  2
        3:   21:            cout << arr[j] << " ";
        3:   21-block  0
        3:   21-block  1
        1:   22:        cout << "\n";
        1:   22-block  0
        -:   23:
        1:   24:        long long result1 = pairwise_Product_Fast(arr, n);
        1:   24-block  0
        1:   25:        long long result2 = pairwise_Product_Slow(arr, n);
        -:   26:
        1:   27:        if (result1 != result2) {
        1:   28:            cout << "WRONG ANSWER" << " -> " << "result 1 : " << result1 << " || " << "result 2 : " << result2<<"\n";
        1:   28-block  0
        1:   28-block  1
        1:   28-block  2
        1:   28-block  3
        1:   28-block  4
        1:   28-block  5
        1:   28-block  6
        1:   28-block  7
        1:   29:            break;
        1:   29-block  0
        -:   30:        } else
    #####:   31:            cout << "TRUE ANSWER" << " -> " << "result 1 : " << result1 << " || " << "result 2 : " << result2 <<"\n";
    %%%%%:   31-block  0
    %%%%%:   31-block  1
    %%%%%:   31-block  2
    %%%%%:   31-block  3
    %%%%%:   31-block  4
    %%%%%:   31-block  5
    %%%%%:   31-block  6
    %%%%%:   31-block  7
       1*:   32:    }
        1:   32-block  0
    %%%%%:   32-block  1
        -:   33:
        -:   34:    /*
        -:   35:    int size;
        -:   36:    cin >> size;
        -:   37:
        -:   38:    long long arr2[size];
        -:   39:    for (int i=0; i < size; ++i)
        -:   40:        cin >> arr2[i];
        -:   41:    cout << pairwise_Product_Fast(arr2, size);
        -:   42:    */
        -:   43:
        -:   44:    /* // PRACTICAL SOLUTION
        -:   45:    //sort(arr, arr+size, greater<long long>());
        -:   46:    //long long result = (long long)(arr[0] * arr[1]);
        -:   47:    //cout << result;
        -:   48:     */
        -:   49:
        1:   50:    return 0;
        1:   50-block  0
        -:   51:}
        -:   52:
        1:   53:long long pairwise_Product_Fast(long long arr[], int size)
        -:   54:{
        1:   55:    if(size == 2)
        1:   55-block  0
    #####:   56:        return (long long)((arr[0] * arr[1]));
    %%%%%:   56-block  0
        1:   57:    else if(size > 2){
        1:   57-block  0
        1:   58:        int maxIndex1 = -1;
        3:   59:        for (int i = 1; i < size; ++i)
        1:   59-block  0
        3:   59-block  1
        2:   59-block  2
        2:   60:            if ((maxIndex1 == -1) || arr[i] > arr[maxIndex1])
        2:   60-block  0
        1:   60-block  1
        1:   61:                maxIndex1 = i;
        1:   61-block  0
        -:   62:
        1:   63:        int maxIndex2 = -1;
        3:   64:        for (int j = 1; j < size; ++j)
        1:   64-block  0
        3:   64-block  1
        2:   64-block  2
       2*:   65:            if ((j != maxIndex1) && ((maxIndex2 == -1) || (arr[j] > arr[maxIndex2])))
        2:   65-block  0
        1:   65-block  1
    %%%%%:   65-block  2
        1:   66:                maxIndex2 = j;
        1:   66-block  0
        -:   67:
        1:   68:        long long result = (long long)(arr[maxIndex1] * arr[maxIndex2]);
        1:   69:        return (long long)(result);
        1:   69-block  0
        -:   70:    }
    #####:   71:    else if(size == 1)
    %%%%%:   71-block  0
    #####:   72:        return (long long)(arr[0]);
    %%%%%:   72-block  0
        -:   73:    else
    #####:   74:        return (long long)NULL;
    %%%%%:   74-block  0
        -:   75:}
        -:   76:
        1:   77:long long pairwise_Product_Slow(long long arr[], int size)
        -:   78:{
        1:   79:    long long result = 0;
        -:   80:
        4:   81:    for(int i = 0; i < size; ++i)
        1:   81-block  0
        4:   81-block  1
        3:   81-block  2
        6:   82:        for(int j = i +1; j < size; ++j)
        3:   82-block  0
        6:   82-block  1
        3:   82-block  2
        3:   83:            if((long long)(arr[i] * arr[j]) > result)
        3:   83-block  0
        1:   84:                result = (long long)(arr[i] * arr[j]);
        1:   84-block  0
        -:   85:
        1:   86:    return (long long)result;
        1:   86-block  0
        -:   87:}
